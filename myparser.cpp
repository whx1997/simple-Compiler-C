/****************************************************************************
*                     U N R E G I S T E R E D   C O P Y
* 
* You are on day 32 of your 30 day trial period.
* 
* This file was produced by an UNREGISTERED COPY of Parser Generator. It is
* for evaluation purposes only. If you continue to use Parser Generator 30
* days after installation then you are required to purchase a license. For
* more information see the online help or go to the Bumble-Bee Software
* homepage at:
* 
* http://www.bumblebeesoftware.com
* 
* This notice must remain present in the file. It cannot be removed.
****************************************************************************/

/****************************************************************************
* myparser.cpp
* C++ source file generated from myparser.y.
* 
* Date: 11/16/17
* Time: 00:34:15
* 
* AYACC Version: 2.07
****************************************************************************/

#include <yycpars.h>

// namespaces
#ifdef YYSTDCPPLIB
using namespace std;
#endif
#ifdef YYNAMESPACE
using namespace yl;
#endif

#line 1 ".\\myparser.y"

/****************************************************************************
myparser.y
ParserWizard generated YACC file.

Date: 2017年10月15日

****************************************************************************/

#include "mylexer.h"
#include "ParserTree.h"


#line 52 "myparser.cpp"
// repeated because of possible precompiled header
#include <yycpars.h>

// namespaces
#ifdef YYSTDCPPLIB
using namespace std;
#endif
#ifdef YYNAMESPACE
using namespace yl;
#endif

#include ".\myparser.h"

/////////////////////////////////////////////////////////////////////////////
// constructor

YYPARSERNAME::YYPARSERNAME()
{
	yytables();
}

/////////////////////////////////////////////////////////////////////////////
// destructor

YYPARSERNAME::~YYPARSERNAME()
{
	// allows virtual functions to be called properly for correct cleanup
	yydestroy();
}

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#ifndef YYSTACK_SIZE
#define YYSTACK_SIZE 100
#endif
#ifndef YYSTACK_MAX
#define YYSTACK_MAX 0
#endif

/****************************************************************************
* N O T E
* 
* If the compiler generates a YYPARSERNAME error then you have not declared
* the name of the parser. The easiest way to do this is to use a name
* declaration. This is placed in the declarations section of your YACC
* source file and is introduced with the %name keyword. For instance, the
* following name declaration declares the parser myparser:
* 
* %name myparser
* 
* For more information see help.
****************************************************************************/

// yyattribute
#ifdef YYDEBUG
void YYFAR* YYPARSERNAME::yyattribute1(int index) const
{
	YYSTYPE YYFAR* p = &((YYSTYPE YYFAR*)yyattributestackptr)[yytop + index];
	return p;
}
#define yyattribute(index) (*(YYSTYPE YYFAR*)yyattribute1(index))
#else
#define yyattribute(index) (((YYSTYPE YYFAR*)yyattributestackptr)[yytop + (index)])
#endif

void YYPARSERNAME::yystacktoval(int index)
{
	yyassert(index >= 0);
	*(YYSTYPE YYFAR*)yyvalptr = ((YYSTYPE YYFAR*)yyattributestackptr)[index];
}

void YYPARSERNAME::yyvaltostack(int index)
{
	yyassert(index >= 0);
	((YYSTYPE YYFAR*)yyattributestackptr)[index] = *(YYSTYPE YYFAR*)yyvalptr;
}

void YYPARSERNAME::yylvaltoval()
{
	*(YYSTYPE YYFAR*)yyvalptr = *(YYSTYPE YYFAR*)yylvalptr;
}

void YYPARSERNAME::yyvaltolval()
{
	*(YYSTYPE YYFAR*)yylvalptr = *(YYSTYPE YYFAR*)yyvalptr;
}

void YYPARSERNAME::yylvaltostack(int index)
{
	yyassert(index >= 0);
	((YYSTYPE YYFAR*)yyattributestackptr)[index] = *(YYSTYPE YYFAR*)yylvalptr;
}

void YYFAR* YYPARSERNAME::yynewattribute(int count)
{
	yyassert(count >= 0);
	return new YYFAR YYSTYPE[count];
}

void YYPARSERNAME::yydeleteattribute(void YYFAR* attribute)
{
	delete[] (YYSTYPE YYFAR*)attribute;
}

void YYPARSERNAME::yycopyattribute(void YYFAR* dest, const void YYFAR* src, int count)
{
	for (int i = 0; i < count; i++) {
		((YYSTYPE YYFAR*)dest)[i] = ((YYSTYPE YYFAR*)src)[i];
	}
}

#ifdef YYDEBUG
void YYPARSERNAME::yyinitdebug(void YYFAR** p, int count) const
{
	yyassert(p != NULL);
	yyassert(count >= 1);

	YYSTYPE YYFAR** p1 = (YYSTYPE YYFAR**)p;
	for (int i = 0; i < count; i++) {
		p1[i] = &((YYSTYPE YYFAR*)yyattributestackptr)[yytop + i - (count - 1)];
	}
}
#endif

void YYPARSERNAME::yyaction(int action)
{
}

void YYPARSERNAME::yytables()
{
	yyattribute_size = sizeof(YYSTYPE);
	yysstack_size = YYSTACK_SIZE;
	yystack_max = YYSTACK_MAX;

#ifdef YYDEBUG
	static const yysymbol_t YYNEARFAR YYBASED_CODE symbol[] = {
		{ "$end", 0 },
		{ "\'!\'", 33 },
		{ "\'%\'", 37 },
		{ "\'&\'", 38 },
		{ "\'(\'", 40 },
		{ "\')\'", 41 },
		{ "\'*\'", 42 },
		{ "\'+\'", 43 },
		{ "\',\'", 44 },
		{ "\'-\'", 45 },
		{ "\'.\'", 46 },
		{ "\'/\'", 47 },
		{ "\':\'", 58 },
		{ "\';\'", 59 },
		{ "\'<\'", 60 },
		{ "\'=\'", 61 },
		{ "\'>\'", 62 },
		{ "\'[\'", 91 },
		{ "\']\'", 93 },
		{ "\'^\'", 94 },
		{ "\'{\'", 123 },
		{ "\'|\'", 124 },
		{ "\'}\'", 125 },
		{ "\'~\'", 126 },
		{ "error", 256 },
		{ "INT", 257 },
		{ "FLOAT", 258 },
		{ "DOUBLE", 259 },
		{ "CHAR", 260 },
		{ "ID", 261 },
		{ "FOR", 265 },
		{ "WHILE", 266 },
		{ "DO", 272 },
		{ "STRING", 278 },
		{ "BOOL", 279 },
		{ "\'/=\'", 280 },
		{ "\'*=\'", 281 },
		{ "\'%=\'", 282 },
		{ "\'+=\'", 283 },
		{ "\'-=\'", 284 },
		{ "\'<<=\'", 285 },
		{ "\'>>=\'", 286 },
		{ "\'&=\'", 287 },
		{ "\'^=\'", 288 },
		{ "\'|=\'", 289 },
		{ "\'||\'", 290 },
		{ "\'&&\'", 291 },
		{ "\'==\'", 292 },
		{ "\'!=\'", 293 },
		{ "\'>=\'", 294 },
		{ "\'<=\'", 295 },
		{ "\'<<\'", 296 },
		{ "\'>>\'", 297 },
		{ "\'->\'", 300 },
		{ "\'while\'", 301 },
		{ "\'if\'", 302 },
		{ "\'else\'", 303 },
		{ "\'char\'", 304 },
		{ "\'int\'", 305 },
		{ "\'float\'", 306 },
		{ "\'double\'", 307 },
		{ "\'string\'", 308 },
		{ "\'struct\'", 309 },
		{ "\'union\'", 310 },
		{ NULL, 0 }
	};
	yysymbol = symbol;

	static const char* const YYNEARFAR YYBASED_CODE rule[] = {
		"$accept: program",
		"program: stmt_list",
		"stmt_list: stmt",
		"stmt_list: stmt_list stmt",
		"stmt: for_stmt",
		"stmt: while_stmt",
		"stmt: if_stmt",
		"stmt: declare_stmt",
		"stmt: \'+\'",
		"expr_stmt: expr",
		"expr_stmt:",
		"expr: expr_unit",
		"expr: expr \',\' expr_unit",
		"expr_unit: primary_expr",
		"expr_unit: single_op expr_unit",
		"expr_unit: expr_unit double_op expr_unit",
		"single_op: \'&\'",
		"single_op: \'*\'",
		"single_op: \'+\'",
		"single_op: \'-\'",
		"single_op: \'~\'",
		"single_op: \'!\'",
		"double_op: \'+\'",
		"double_op: \'-\'",
		"double_op: \'*\'",
		"double_op: \'/\'",
		"double_op: \'%\'",
		"double_op: \'|\'",
		"double_op: \'&\'",
		"double_op: \'^\'",
		"double_op: \'=\'",
		"double_op: \'*=\'",
		"double_op: \'/=\'",
		"double_op: \'%=\'",
		"double_op: \'+=\'",
		"double_op: \'-=\'",
		"double_op: \'<<=\'",
		"double_op: \'>>=\'",
		"double_op: \'&=\'",
		"double_op: \'^=\'",
		"double_op: \'|=\' \'||\'",
		"double_op: \'&&\'",
		"double_op: \'>\'",
		"double_op: \'<\'",
		"double_op: \'<=\'",
		"double_op: \'>=\'",
		"double_op: \'==\'",
		"double_op: \'!=\'",
		"double_op: \'>>\'",
		"double_op: \'<<\'",
		"primary_expr: id_expr",
		"primary_expr: const",
		"primary_expr: \'(\' expr \')\'",
		"id_expr: ID",
		"id_expr: id_expr \'[\' expr_unit \']\'",
		"id_expr: id_expr \'(\' expr \')\'",
		"id_expr: id_expr \'(\' \')\'",
		"id_expr: id_expr \'.\' ID",
		"id_expr: id_expr \'->\' ID",
		"const: INT",
		"const: CHAR",
		"const: FLOAT",
		"const: DOUBLE",
		"const: BOOL",
		"const: STRING",
		"for_stmt: FOR \'(\' for_declare \';\' expr \';\' expr \')\' \'{\' stmt_list \'}\'",
		"for_stmt: FOR \'(\' for_declare \';\' expr \';\' \')\' \'{\' stmt_list \'}\'",
		"for_stmt: FOR \'(\' for_declare \';\' \';\' expr \')\' \'{\' stmt_list \'}\'",
		"for_stmt: FOR \'(\' for_declare \';\' \';\' \')\' \'{\' stmt_list \'}\'",
		"for_stmt: FOR \'(\' \';\' expr \';\' expr \')\' \'{\' stmt_list \'}\'",
		"for_stmt: FOR \'(\' \';\' expr \';\' \')\' \'{\' stmt_list \'}\'",
		"for_stmt: FOR \'(\' \';\' \';\' expr \')\' \'{\' stmt_list \'}\'",
		"for_stmt: FOR \'(\' \';\' \';\' \')\' \'{\' stmt_list \'}\'",
		"for_declare: type_norm declar_list",
		"for_declare: declar_list",
		"declar_list: expr",
		"declar_list: declar_list \',\' expr",
		"while_stmt: WHILE \'(\' expr \')\' \'{\' stmt_list \'}\'",
		"while_stmt: DO \'{\' stmt_list \'}\' \'while\' \'(\' expr \')\'",
		"if_stmt: \'if\' \'(\' expr \')\' \'{\' stmt_list \'}\'",
		"if_stmt: \'if\' \'(\' expr \')\' \'{\' stmt_list \'}\' \'else\' \'{\' stmt_list \'}\'",
		"declare_stmt: decl_norm init_declarator_list",
		"declare_stmt: decl_norm",
		"decl_list: declare_stmt",
		"decl_list: decl_list declare_stmt",
		"decl_norm: type_norm decl_norm",
		"decl_norm: type_norm",
		"type_norm: \'char\'",
		"type_norm: \'int\'",
		"type_norm: \'float\'",
		"type_norm: \'double\'",
		"type_norm: \'string\'",
		"type_norm: struct_or_union_norm",
		"type_norm: typedef_name",
		"struct_or_union_norm: struct_or_union ID \'{\' struct_decl_list \'}\'",
		"struct_or_union_norm: struct_or_union \'{\' struct_decl_list \'}\'",
		"struct_or_union_norm: struct_or_union ID",
		"struct_or_union: \'struct\'",
		"struct_or_union: \'union\'",
		"struct_decl_list: struct_decl",
		"struct_decl_list: struct_decl_list struct_decl",
		"init_declarator_list: init_declarator",
		"init_declarator_list: init_declarator_list \',\' init_declarator",
		"init_declarator: declarator",
		"init_declarator: declarator \'=\' initializer",
		"initializer: expr",
		"initializer: \'{\' initializer_list \'}\'",
		"initializer: \'{\' initializer_list \',\' \'}\'",
		"initializer_list: initializer",
		"initializer_list: initializer_list \',\' initializer",
		"struct_declarator_list: struct_declarator",
		"struct_declarator_list: struct_declarator_list \',\' struct_declarator",
		"struct_declarator: declarator",
		"struct_declarator: declarator \':\' expr",
		"struct_declarator: \':\' expr",
		"struct_decl: spec_qualifier_list struct_declarator_list \';\'",
		"spec_qualifier_list: type_norm spec_qualifier_list",
		"spec_qualifier_list: type_norm",
		"declarator: pointer direct_declarator",
		"declarator: direct_declarator",
		"direct_declarator: ID",
		"direct_declarator: \'(\' declarator \')\'",
		"direct_declarator: direct_declarator \'[\' expr \']\'",
		"direct_declarator: direct_declarator \'[\' \']\'",
		"direct_declarator: direct_declarator \'(\' id_list \')\'",
		"direct_declarator: direct_declarator \'(\' \')\'",
		"pointer: \'*\'",
		"pointer: \'*\' pointer",
		"param_list: param_decl",
		"param_list: param_list \',\' param_decl",
		"param_decl: decl_norm declarator",
		"param_decl: decl_norm",
		"id_list: ID",
		"id_list: id_list \',\' ID",
		"init: expr",
		"init: \'{\' init_list \'}\'",
		"init: \'{\' init_list \',\' \'}\'",
		"init_list: init",
		"init_list: init_list \',\' init",
		"typedef_name: ID"
	};
	yyrule = rule;
#endif

	static const yyreduction_t YYNEARFAR YYBASED_CODE reduction[] = {
		{ 0, 1, -1 },
		{ 1, 1, -1 },
		{ 2, 1, -1 },
		{ 2, 2, -1 },
		{ 3, 1, -1 },
		{ 3, 1, -1 },
		{ 3, 1, -1 },
		{ 3, 1, -1 },
		{ 3, 1, -1 },
		{ 4, 1, -1 },
		{ 4, 0, -1 },
		{ 5, 1, -1 },
		{ 5, 3, -1 },
		{ 6, 1, -1 },
		{ 6, 2, -1 },
		{ 6, 3, -1 },
		{ 7, 1, -1 },
		{ 7, 1, -1 },
		{ 7, 1, -1 },
		{ 7, 1, -1 },
		{ 7, 1, -1 },
		{ 7, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 2, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 8, 1, -1 },
		{ 9, 1, -1 },
		{ 9, 1, -1 },
		{ 9, 3, -1 },
		{ 10, 1, -1 },
		{ 10, 4, -1 },
		{ 10, 4, -1 },
		{ 10, 3, -1 },
		{ 10, 3, -1 },
		{ 10, 3, -1 },
		{ 11, 1, -1 },
		{ 11, 1, -1 },
		{ 11, 1, -1 },
		{ 11, 1, -1 },
		{ 11, 1, -1 },
		{ 11, 1, -1 },
		{ 12, 11, -1 },
		{ 12, 10, -1 },
		{ 12, 10, -1 },
		{ 12, 9, -1 },
		{ 12, 10, -1 },
		{ 12, 9, -1 },
		{ 12, 9, -1 },
		{ 12, 8, -1 },
		{ 13, 2, -1 },
		{ 13, 1, -1 },
		{ 14, 1, -1 },
		{ 14, 3, -1 },
		{ 15, 7, -1 },
		{ 15, 8, -1 },
		{ 16, 7, -1 },
		{ 16, 11, -1 },
		{ 17, 2, -1 },
		{ 17, 1, -1 },
		{ 18, 1, -1 },
		{ 18, 2, -1 },
		{ 19, 2, -1 },
		{ 19, 1, -1 },
		{ 20, 1, -1 },
		{ 20, 1, -1 },
		{ 20, 1, -1 },
		{ 20, 1, -1 },
		{ 20, 1, -1 },
		{ 20, 1, -1 },
		{ 20, 1, -1 },
		{ 21, 5, -1 },
		{ 21, 4, -1 },
		{ 21, 2, -1 },
		{ 22, 1, -1 },
		{ 22, 1, -1 },
		{ 23, 1, -1 },
		{ 23, 2, -1 },
		{ 24, 1, -1 },
		{ 24, 3, -1 },
		{ 25, 1, -1 },
		{ 25, 3, -1 },
		{ 26, 1, -1 },
		{ 26, 3, -1 },
		{ 26, 4, -1 },
		{ 27, 1, -1 },
		{ 27, 3, -1 },
		{ 28, 1, -1 },
		{ 28, 3, -1 },
		{ 29, 1, -1 },
		{ 29, 3, -1 },
		{ 29, 2, -1 },
		{ 30, 3, -1 },
		{ 31, 2, -1 },
		{ 31, 1, -1 },
		{ 32, 2, -1 },
		{ 32, 1, -1 },
		{ 33, 1, -1 },
		{ 33, 3, -1 },
		{ 33, 4, -1 },
		{ 33, 3, -1 },
		{ 33, 4, -1 },
		{ 33, 3, -1 },
		{ 34, 1, -1 },
		{ 34, 2, -1 },
		{ 35, 1, -1 },
		{ 35, 3, -1 },
		{ 36, 2, -1 },
		{ 36, 1, -1 },
		{ 37, 1, -1 },
		{ 37, 3, -1 },
		{ 38, 1, -1 },
		{ 38, 3, -1 },
		{ 38, 4, -1 },
		{ 39, 1, -1 },
		{ 39, 3, -1 },
		{ 40, 1, -1 }
	};
	yyreduction = reduction;

	yytokenaction_size = 449;

	static const yytokenaction_t YYNEARFAR YYBASED_CODE tokenaction[] = {
		{ 154, YYAT_SHIFT, 86 },
		{ 154, YYAT_SHIFT, 87 },
		{ 169, YYAT_SHIFT, 32 },
		{ 143, YYAT_ERROR, 0 },
		{ 169, YYAT_SHIFT, 33 },
		{ 154, YYAT_SHIFT, 88 },
		{ 154, YYAT_SHIFT, 89 },
		{ 22, YYAT_SHIFT, 32 },
		{ 154, YYAT_SHIFT, 90 },
		{ 22, YYAT_SHIFT, 33 },
		{ 154, YYAT_SHIFT, 91 },
		{ 75, YYAT_SHIFT, 131 },
		{ 25, YYAT_SHIFT, 40 },
		{ 74, YYAT_SHIFT, 75 },
		{ 135, YYAT_SHIFT, 85 },
		{ 157, YYAT_SHIFT, 85 },
		{ 198, YYAT_SHIFT, 210 },
		{ 39, YYAT_SHIFT, 75 },
		{ 141, YYAT_SHIFT, 169 },
		{ 198, YYAT_SHIFT, 85 },
		{ 169, YYAT_SHIFT, 139 },
		{ 150, YYAT_SHIFT, 86 },
		{ 150, YYAT_SHIFT, 87 },
		{ 154, YYAT_SHIFT, 92 },
		{ 154, YYAT_SHIFT, 93 },
		{ 154, YYAT_SHIFT, 94 },
		{ 150, YYAT_SHIFT, 88 },
		{ 150, YYAT_SHIFT, 89 },
		{ 163, YYAT_SHIFT, 184 },
		{ 150, YYAT_SHIFT, 90 },
		{ 157, YYAT_SHIFT, 180 },
		{ 150, YYAT_SHIFT, 91 },
		{ 133, YYAT_SHIFT, 164 },
		{ 141, YYAT_SHIFT, 170 },
		{ 223, YYAT_SHIFT, 225 },
		{ 133, YYAT_SHIFT, 165 },
		{ 219, YYAT_ERROR, 0 },
		{ 217, YYAT_SHIFT, 222 },
		{ 216, YYAT_SHIFT, 221 },
		{ 214, YYAT_SHIFT, 220 },
		{ 211, YYAT_SHIFT, 219 },
		{ 209, YYAT_SHIFT, 218 },
		{ 148, YYAT_SHIFT, 86 },
		{ 148, YYAT_SHIFT, 87 },
		{ 150, YYAT_SHIFT, 92 },
		{ 150, YYAT_SHIFT, 93 },
		{ 150, YYAT_SHIFT, 94 },
		{ 148, YYAT_SHIFT, 88 },
		{ 148, YYAT_SHIFT, 89 },
		{ 206, YYAT_SHIFT, 215 },
		{ 148, YYAT_SHIFT, 90 },
		{ 204, YYAT_SHIFT, 213 },
		{ 148, YYAT_SHIFT, 91 },
		{ 203, YYAT_SHIFT, 212 },
		{ 199, YYAT_SHIFT, 211 },
		{ 196, YYAT_SHIFT, 209 },
		{ 154, YYAT_SHIFT, 177 },
		{ 154, YYAT_SHIFT, 95 },
		{ 195, YYAT_SHIFT, 208 },
		{ 26, YYAT_SHIFT, 48 },
		{ 194, YYAT_SHIFT, 207 },
		{ 192, YYAT_SHIFT, 205 },
		{ 189, YYAT_SHIFT, 202 },
		{ 135, YYAT_SHIFT, 166 },
		{ 74, YYAT_SHIFT, 76 },
		{ 148, YYAT_SHIFT, 92 },
		{ 148, YYAT_SHIFT, 93 },
		{ 148, YYAT_SHIFT, 94 },
		{ 39, YYAT_SHIFT, 76 },
		{ 115, YYAT_SHIFT, 86 },
		{ 115, YYAT_SHIFT, 87 },
		{ 187, YYAT_SHIFT, 85 },
		{ 183, YYAT_SHIFT, 199 },
		{ 77, YYAT_SHIFT, 2 },
		{ 115, YYAT_SHIFT, 88 },
		{ 115, YYAT_SHIFT, 89 },
		{ 182, YYAT_ERROR, 0 },
		{ 115, YYAT_SHIFT, 90 },
		{ 150, YYAT_SHIFT, 95 },
		{ 115, YYAT_SHIFT, 91 },
		{ 181, YYAT_SHIFT, 197 },
		{ 180, YYAT_SHIFT, 195 },
		{ 179, YYAT_SHIFT, 194 },
		{ 178, YYAT_SHIFT, 193 },
		{ 175, YYAT_SHIFT, 192 },
		{ 143, YYAT_SHIFT, 171 },
		{ 174, YYAT_SHIFT, 191 },
		{ 154, YYAT_SHIFT, 96 },
		{ 173, YYAT_SHIFT, 190 },
		{ 167, YYAT_SHIFT, 85 },
		{ 58, YYAT_SHIFT, 86 },
		{ 58, YYAT_SHIFT, 87 },
		{ 115, YYAT_SHIFT, 92 },
		{ 115, YYAT_SHIFT, 93 },
		{ 115, YYAT_SHIFT, 94 },
		{ 58, YYAT_SHIFT, 88 },
		{ 58, YYAT_SHIFT, 89 },
		{ 61, YYAT_SHIFT, 116 },
		{ 58, YYAT_SHIFT, 90 },
		{ 148, YYAT_SHIFT, 95 },
		{ 58, YYAT_SHIFT, 91 },
		{ 165, YYAT_SHIFT, 186 },
		{ 160, YYAT_SHIFT, 182 },
		{ 61, YYAT_SHIFT, 117 },
		{ 156, YYAT_SHIFT, 178 },
		{ 152, YYAT_SHIFT, 176 },
		{ 147, YYAT_SHIFT, 174 },
		{ 146, YYAT_SHIFT, 173 },
		{ 150, YYAT_SHIFT, 96 },
		{ 163, YYAT_SHIFT, 185 },
		{ 145, YYAT_SHIFT, 172 },
		{ 140, YYAT_SHIFT, 168 },
		{ 129, YYAT_SHIFT, 85 },
		{ 58, YYAT_SHIFT, 92 },
		{ 58, YYAT_SHIFT, 93 },
		{ 58, YYAT_SHIFT, 94 },
		{ 77, YYAT_SHIFT, 7 },
		{ 77, YYAT_SHIFT, 8 },
		{ 77, YYAT_SHIFT, 9 },
		{ 77, YYAT_SHIFT, 10 },
		{ 77, YYAT_SHIFT, 11 },
		{ 77, YYAT_SHIFT, 12 },
		{ 77, YYAT_SHIFT, 13 },
		{ 21, YYAT_SHIFT, 2 },
		{ 128, YYAT_ERROR, 0 },
		{ 125, YYAT_SHIFT, 161 },
		{ 115, YYAT_SHIFT, 95 },
		{ 184, YYAT_SHIFT, 42 },
		{ 124, YYAT_SHIFT, 160 },
		{ 148, YYAT_SHIFT, 96 },
		{ 123, YYAT_SHIFT, 159 },
		{ 121, YYAT_SHIFT, 122 },
		{ 184, YYAT_SHIFT, 43 },
		{ 120, YYAT_SHIFT, 156 },
		{ 184, YYAT_SHIFT, 44 },
		{ 119, YYAT_SHIFT, 155 },
		{ 184, YYAT_SHIFT, 45 },
		{ 184, YYAT_SHIFT, 46 },
		{ 117, YYAT_SHIFT, 153 },
		{ 184, YYAT_SHIFT, 47 },
		{ 224, YYAT_SHIFT, 1 },
		{ 116, YYAT_SHIFT, 151 },
		{ 106, YYAT_SHIFT, 149 },
		{ 84, YYAT_SHIFT, 147 },
		{ 83, YYAT_SHIFT, 145 },
		{ 82, YYAT_SHIFT, 144 },
		{ 81, YYAT_ERROR, 0 },
		{ 58, YYAT_SHIFT, 95 },
		{ 61, YYAT_SHIFT, 118 },
		{ 78, YYAT_SHIFT, 137 },
		{ 25, YYAT_SHIFT, 41 },
		{ 76, YYAT_SHIFT, 134 },
		{ 15, YYAT_SHIFT, 1 },
		{ 72, YYAT_ERROR, 0 },
		{ 70, YYAT_SHIFT, 126 },
		{ 69, YYAT_SHIFT, 125 },
		{ 115, YYAT_SHIFT, 96 },
		{ 68, YYAT_SHIFT, 124 },
		{ 67, YYAT_SHIFT, 123 },
		{ 65, YYAT_SHIFT, 122 },
		{ 63, YYAT_SHIFT, 120 },
		{ 57, YYAT_SHIFT, 85 },
		{ 48, YYAT_SHIFT, 83 },
		{ 41, YYAT_SHIFT, 81 },
		{ 38, YYAT_ERROR, 0 },
		{ 37, YYAT_SHIFT, 73 },
		{ 21, YYAT_SHIFT, 7 },
		{ 21, YYAT_SHIFT, 8 },
		{ 21, YYAT_SHIFT, 9 },
		{ 21, YYAT_SHIFT, 10 },
		{ 21, YYAT_SHIFT, 11 },
		{ 21, YYAT_SHIFT, 12 },
		{ 21, YYAT_SHIFT, 13 },
		{ 35, YYAT_SHIFT, 72 },
		{ 33, YYAT_SHIFT, 33 },
		{ 14, YYAT_ACCEPT, 0 },
		{ 6, YYAT_SHIFT, 29 },
		{ 58, YYAT_SHIFT, 96 },
		{ 5, YYAT_SHIFT, 28 },
		{ 4, YYAT_SHIFT, 27 },
		{ 3, YYAT_SHIFT, 26 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ 54, YYAT_REDUCE, 139 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ 184, YYAT_SHIFT, 128 },
		{ -1, YYAT_ERROR, 0 },
		{ 184, YYAT_SHIFT, 200 },
		{ 184, YYAT_SHIFT, 49 },
		{ -1, YYAT_ERROR, 0 },
		{ 224, YYAT_SHIFT, 226 },
		{ 169, YYAT_SHIFT, 34 },
		{ -1, YYAT_ERROR, 0 },
		{ 143, YYAT_ERROR, 0 },
		{ 143, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ 22, YYAT_SHIFT, 34 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ 75, YYAT_SHIFT, 132 },
		{ 143, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ 154, YYAT_SHIFT, 97 },
		{ 154, YYAT_SHIFT, 98 },
		{ 154, YYAT_SHIFT, 99 },
		{ 154, YYAT_SHIFT, 100 },
		{ 154, YYAT_SHIFT, 101 },
		{ 154, YYAT_SHIFT, 102 },
		{ 154, YYAT_SHIFT, 103 },
		{ 154, YYAT_SHIFT, 104 },
		{ 154, YYAT_SHIFT, 105 },
		{ 154, YYAT_SHIFT, 106 },
		{ -1, YYAT_ERROR, 0 },
		{ 154, YYAT_SHIFT, 107 },
		{ 154, YYAT_SHIFT, 108 },
		{ 154, YYAT_SHIFT, 109 },
		{ 154, YYAT_SHIFT, 110 },
		{ 154, YYAT_SHIFT, 111 },
		{ 154, YYAT_SHIFT, 112 },
		{ 154, YYAT_SHIFT, 113 },
		{ 26, YYAT_SHIFT, 54 },
		{ 143, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ 150, YYAT_SHIFT, 97 },
		{ 150, YYAT_SHIFT, 98 },
		{ 150, YYAT_SHIFT, 99 },
		{ 150, YYAT_SHIFT, 100 },
		{ 150, YYAT_SHIFT, 101 },
		{ 150, YYAT_SHIFT, 102 },
		{ 150, YYAT_SHIFT, 103 },
		{ 150, YYAT_SHIFT, 104 },
		{ 150, YYAT_SHIFT, 105 },
		{ 150, YYAT_SHIFT, 106 },
		{ -1, YYAT_ERROR, 0 },
		{ 150, YYAT_SHIFT, 107 },
		{ 150, YYAT_SHIFT, 108 },
		{ 150, YYAT_SHIFT, 109 },
		{ 150, YYAT_SHIFT, 110 },
		{ 150, YYAT_SHIFT, 111 },
		{ 150, YYAT_SHIFT, 112 },
		{ 150, YYAT_SHIFT, 113 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ 148, YYAT_SHIFT, 97 },
		{ 148, YYAT_SHIFT, 98 },
		{ 148, YYAT_SHIFT, 99 },
		{ 148, YYAT_SHIFT, 100 },
		{ 148, YYAT_SHIFT, 101 },
		{ 148, YYAT_SHIFT, 102 },
		{ 148, YYAT_SHIFT, 103 },
		{ 148, YYAT_SHIFT, 104 },
		{ 148, YYAT_SHIFT, 105 },
		{ 148, YYAT_SHIFT, 106 },
		{ 54, YYAT_REDUCE, 139 },
		{ 148, YYAT_SHIFT, 107 },
		{ 148, YYAT_SHIFT, 108 },
		{ 148, YYAT_SHIFT, 109 },
		{ 148, YYAT_SHIFT, 110 },
		{ 148, YYAT_SHIFT, 111 },
		{ 148, YYAT_SHIFT, 112 },
		{ 148, YYAT_SHIFT, 113 },
		{ -1, YYAT_ERROR, 0 },
		{ 26, YYAT_SHIFT, 7 },
		{ 26, YYAT_SHIFT, 8 },
		{ 26, YYAT_SHIFT, 9 },
		{ 26, YYAT_SHIFT, 10 },
		{ 26, YYAT_SHIFT, 11 },
		{ 26, YYAT_SHIFT, 12 },
		{ 26, YYAT_SHIFT, 13 },
		{ -1, YYAT_ERROR, 0 },
		{ 115, YYAT_SHIFT, 97 },
		{ 115, YYAT_SHIFT, 98 },
		{ 115, YYAT_SHIFT, 99 },
		{ 115, YYAT_SHIFT, 100 },
		{ 115, YYAT_SHIFT, 101 },
		{ 115, YYAT_SHIFT, 102 },
		{ 115, YYAT_SHIFT, 103 },
		{ 115, YYAT_SHIFT, 104 },
		{ 115, YYAT_SHIFT, 105 },
		{ 115, YYAT_SHIFT, 106 },
		{ -1, YYAT_ERROR, 0 },
		{ 115, YYAT_SHIFT, 107 },
		{ 115, YYAT_SHIFT, 108 },
		{ 115, YYAT_SHIFT, 109 },
		{ 115, YYAT_SHIFT, 110 },
		{ 115, YYAT_SHIFT, 111 },
		{ 115, YYAT_SHIFT, 112 },
		{ 115, YYAT_SHIFT, 113 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ 58, YYAT_SHIFT, 97 },
		{ 58, YYAT_SHIFT, 98 },
		{ 58, YYAT_SHIFT, 99 },
		{ 58, YYAT_SHIFT, 100 },
		{ 58, YYAT_SHIFT, 101 },
		{ 58, YYAT_SHIFT, 102 },
		{ 58, YYAT_SHIFT, 103 },
		{ 58, YYAT_SHIFT, 104 },
		{ 58, YYAT_SHIFT, 105 },
		{ 58, YYAT_SHIFT, 106 },
		{ -1, YYAT_ERROR, 0 },
		{ 58, YYAT_SHIFT, 107 },
		{ 58, YYAT_SHIFT, 108 },
		{ 58, YYAT_SHIFT, 109 },
		{ 58, YYAT_SHIFT, 110 },
		{ 58, YYAT_SHIFT, 111 },
		{ 58, YYAT_SHIFT, 112 },
		{ 58, YYAT_SHIFT, 113 },
		{ 184, YYAT_SHIFT, 50 },
		{ 184, YYAT_SHIFT, 51 },
		{ 184, YYAT_SHIFT, 52 },
		{ 184, YYAT_SHIFT, 53 },
		{ 184, YYAT_SHIFT, 66 },
		{ -1, YYAT_ERROR, 0 },
		{ 61, YYAT_SHIFT, 119 },
		{ 224, YYAT_SHIFT, 2 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ 224, YYAT_SHIFT, 3 },
		{ 224, YYAT_SHIFT, 4 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ 224, YYAT_SHIFT, 5 },
		{ 15, YYAT_SHIFT, 2 },
		{ -1, YYAT_ERROR, 0 },
		{ 184, YYAT_SHIFT, 55 },
		{ 184, YYAT_SHIFT, 56 },
		{ 15, YYAT_SHIFT, 3 },
		{ 15, YYAT_SHIFT, 4 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ 15, YYAT_SHIFT, 5 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ 224, YYAT_SHIFT, 6 },
		{ -1, YYAT_ERROR, 0 },
		{ 224, YYAT_SHIFT, 7 },
		{ 224, YYAT_SHIFT, 8 },
		{ 224, YYAT_SHIFT, 9 },
		{ 224, YYAT_SHIFT, 10 },
		{ 224, YYAT_SHIFT, 11 },
		{ 224, YYAT_SHIFT, 12 },
		{ 224, YYAT_SHIFT, 13 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ 15, YYAT_SHIFT, 6 },
		{ -1, YYAT_ERROR, 0 },
		{ 15, YYAT_SHIFT, 7 },
		{ 15, YYAT_SHIFT, 8 },
		{ 15, YYAT_SHIFT, 9 },
		{ 15, YYAT_SHIFT, 10 },
		{ 15, YYAT_SHIFT, 11 },
		{ 15, YYAT_SHIFT, 12 },
		{ 15, YYAT_SHIFT, 13 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ 54, YYAT_REDUCE, 139 },
		{ 54, YYAT_REDUCE, 139 },
		{ 54, YYAT_REDUCE, 139 },
		{ 54, YYAT_REDUCE, 139 },
		{ 54, YYAT_REDUCE, 139 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ -1, YYAT_ERROR, 0 },
		{ 54, YYAT_REDUCE, 139 },
		{ 54, YYAT_REDUCE, 139 }
	};
	yytokenaction = tokenaction;

	static const yystateaction_t YYNEARFAR YYBASED_CODE stateaction[] = {
		{ 0, 0, YYAT_DEFAULT, 219 },
		{ 0, 0, YYAT_REDUCE, 8 },
		{ 0, 0, YYAT_REDUCE, 139 },
		{ 140, 1, YYAT_ERROR, 0 },
		{ 139, 1, YYAT_ERROR, 0 },
		{ 55, 1, YYAT_ERROR, 0 },
		{ 136, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 87 },
		{ 0, 0, YYAT_REDUCE, 88 },
		{ 0, 0, YYAT_REDUCE, 89 },
		{ 0, 0, YYAT_REDUCE, 90 },
		{ 0, 0, YYAT_REDUCE, 91 },
		{ 0, 0, YYAT_REDUCE, 97 },
		{ 0, 0, YYAT_REDUCE, 98 },
		{ 175, 1, YYAT_ERROR, 0 },
		{ 109, 1, YYAT_REDUCE, 1 },
		{ 0, 0, YYAT_REDUCE, 2 },
		{ 0, 0, YYAT_REDUCE, 4 },
		{ 0, 0, YYAT_REDUCE, 5 },
		{ 0, 0, YYAT_REDUCE, 6 },
		{ 0, 0, YYAT_REDUCE, 7 },
		{ -138, 1, YYAT_REDUCE, 86 },
		{ -33, 1, YYAT_REDUCE, 82 },
		{ 0, 0, YYAT_REDUCE, 92 },
		{ 0, 0, YYAT_REDUCE, 93 },
		{ -111, 1, YYAT_ERROR, 0 },
		{ 0, 1, YYAT_DEFAULT, 182 },
		{ 0, 0, YYAT_DEFAULT, 182 },
		{ 0, 0, YYAT_DEFAULT, 219 },
		{ 0, 0, YYAT_DEFAULT, 182 },
		{ 0, 0, YYAT_REDUCE, 3 },
		{ 0, 0, YYAT_REDUCE, 85 },
		{ 0, 0, YYAT_DEFAULT, 72 },
		{ 132, 1, YYAT_REDUCE, 126 },
		{ 0, 0, YYAT_REDUCE, 120 },
		{ 129, 1, YYAT_REDUCE, 81 },
		{ 0, 0, YYAT_REDUCE, 101 },
		{ 104, 1, YYAT_REDUCE, 103 },
		{ 122, 1, YYAT_DEFAULT, 72 },
		{ -23, 1, YYAT_REDUCE, 119 },
		{ 0, 0, YYAT_DEFAULT, 81 },
		{ 40, 1, YYAT_REDUCE, 96 },
		{ 0, 0, YYAT_REDUCE, 21 },
		{ 0, 0, YYAT_REDUCE, 16 },
		{ 0, 0, YYAT_DEFAULT, 182 },
		{ 0, 0, YYAT_REDUCE, 17 },
		{ 0, 0, YYAT_REDUCE, 18 },
		{ 0, 0, YYAT_REDUCE, 19 },
		{ 103, 1, YYAT_DEFAULT, 182 },
		{ 0, 0, YYAT_REDUCE, 20 },
		{ 0, 0, YYAT_REDUCE, 59 },
		{ 0, 0, YYAT_REDUCE, 61 },
		{ 0, 0, YYAT_REDUCE, 62 },
		{ 0, 0, YYAT_REDUCE, 60 },
		{ 169, 1, YYAT_REDUCE, 53 },
		{ 0, 0, YYAT_REDUCE, 64 },
		{ 0, 0, YYAT_REDUCE, 63 },
		{ 117, 1, YYAT_REDUCE, 75 },
		{ 53, 1, YYAT_REDUCE, 11 },
		{ 0, 0, YYAT_REDUCE, 13 },
		{ 0, 0, YYAT_DEFAULT, 182 },
		{ 57, 1, YYAT_REDUCE, 50 },
		{ 0, 0, YYAT_REDUCE, 51 },
		{ 101, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_DEFAULT, 182 },
		{ 115, 1, YYAT_REDUCE, 74 },
		{ 0, 0, YYAT_REDUCE, 53 },
		{ 117, 1, YYAT_DEFAULT, 198 },
		{ 32, 1, YYAT_DEFAULT, 224 },
		{ 114, 1, YYAT_DEFAULT, 198 },
		{ 113, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 127 },
		{ 95, 1, YYAT_DEFAULT, 169 },
		{ 0, 0, YYAT_DEFAULT, 128 },
		{ -27, 1, YYAT_REDUCE, 118 },
		{ -30, 1, YYAT_ERROR, 0 },
		{ 58, 1, YYAT_DEFAULT, 182 },
		{ -188, 1, YYAT_REDUCE, 117 },
		{ 24, 1, YYAT_DEFAULT, 143 },
		{ 0, 0, YYAT_REDUCE, 99 },
		{ 0, 0, YYAT_DEFAULT, 169 },
		{ 21, 1, YYAT_DEFAULT, 143 },
		{ 104, 1, YYAT_DEFAULT, 198 },
		{ 103, 1, YYAT_DEFAULT, 182 },
		{ 84, 1, YYAT_DEFAULT, 157 },
		{ 0, 0, YYAT_DEFAULT, 182 },
		{ 0, 0, YYAT_REDUCE, 26 },
		{ 0, 0, YYAT_REDUCE, 28 },
		{ 0, 0, YYAT_REDUCE, 24 },
		{ 0, 0, YYAT_REDUCE, 22 },
		{ 0, 0, YYAT_REDUCE, 23 },
		{ 0, 0, YYAT_REDUCE, 25 },
		{ 0, 0, YYAT_REDUCE, 43 },
		{ 0, 0, YYAT_REDUCE, 30 },
		{ 0, 0, YYAT_REDUCE, 42 },
		{ 0, 0, YYAT_REDUCE, 29 },
		{ 0, 0, YYAT_REDUCE, 27 },
		{ 0, 0, YYAT_REDUCE, 32 },
		{ 0, 0, YYAT_REDUCE, 31 },
		{ 0, 0, YYAT_REDUCE, 33 },
		{ 0, 0, YYAT_REDUCE, 34 },
		{ 0, 0, YYAT_REDUCE, 35 },
		{ 0, 0, YYAT_REDUCE, 36 },
		{ 0, 0, YYAT_REDUCE, 37 },
		{ 0, 0, YYAT_REDUCE, 38 },
		{ 0, 0, YYAT_REDUCE, 39 },
		{ -148, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 41 },
		{ 0, 0, YYAT_REDUCE, 46 },
		{ 0, 0, YYAT_REDUCE, 47 },
		{ 0, 0, YYAT_REDUCE, 45 },
		{ 0, 0, YYAT_REDUCE, 44 },
		{ 0, 0, YYAT_REDUCE, 49 },
		{ 0, 0, YYAT_REDUCE, 48 },
		{ 0, 0, YYAT_DEFAULT, 182 },
		{ 32, 1, YYAT_REDUCE, 14 },
		{ 100, 1, YYAT_DEFAULT, 182 },
		{ -123, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_DEFAULT, 182 },
		{ -126, 1, YYAT_ERROR, 0 },
		{ 74, 1, YYAT_DEFAULT, 182 },
		{ 87, 1, YYAT_REDUCE, 73 },
		{ 0, 0, YYAT_DEFAULT, 182 },
		{ 7, 1, YYAT_ERROR, 0 },
		{ -173, 1, YYAT_ERROR, 0 },
		{ 2, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 121 },
		{ 0, 0, YYAT_REDUCE, 102 },
		{ -1, 1, YYAT_DEFAULT, 184 },
		{ 68, 1, YYAT_REDUCE, 105 },
		{ 0, 0, YYAT_REDUCE, 104 },
		{ 0, 0, YYAT_REDUCE, 125 },
		{ 0, 0, YYAT_REDUCE, 132 },
		{ -9, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 123 },
		{ -30, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 116 },
		{ 0, 0, YYAT_REDUCE, 95 },
		{ 0, 0, YYAT_REDUCE, 100 },
		{ 0, 0, YYAT_DEFAULT, 182 },
		{ 53, 1, YYAT_REDUCE, 112 },
		{ -26, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 110 },
		{ -40, 1, YYAT_DEFAULT, 224 },
		{ 0, 0, YYAT_REDUCE, 52 },
		{ -13, 1, YYAT_ERROR, 0 },
		{ 66, 1, YYAT_DEFAULT, 198 },
		{ 65, 1, YYAT_DEFAULT, 182 },
		{ 5, 1, YYAT_REDUCE, 12 },
		{ 0, 0, YYAT_REDUCE, 40 },
		{ -16, 1, YYAT_REDUCE, 15 },
		{ 0, 0, YYAT_REDUCE, 56 },
		{ 64, 1, YYAT_DEFAULT, 198 },
		{ 0, 0, YYAT_REDUCE, 57 },
		{ -37, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 58 },
		{ 63, 1, YYAT_DEFAULT, 182 },
		{ -29, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 76 },
		{ 0, 0, YYAT_DEFAULT, 219 },
		{ 62, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_DEFAULT, 219 },
		{ 0, 0, YYAT_REDUCE, 108 },
		{ -16, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 124 },
		{ -160, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 122 },
		{ 45, 1, YYAT_REDUCE, 114 },
		{ 0, 0, YYAT_DEFAULT, 182 },
		{ -38, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 115 },
		{ 0, 0, YYAT_REDUCE, 94 },
		{ 0, 0, YYAT_DEFAULT, 219 },
		{ -35, 1, YYAT_ERROR, 0 },
		{ -37, 1, YYAT_ERROR, 0 },
		{ 43, 1, YYAT_DEFAULT, 198 },
		{ 0, 0, YYAT_REDUCE, 55 },
		{ 0, 0, YYAT_REDUCE, 54 },
		{ -40, 1, YYAT_ERROR, 0 },
		{ 41, 1, YYAT_DEFAULT, 198 },
		{ 40, 1, YYAT_DEFAULT, 182 },
		{ -45, 1, YYAT_DEFAULT, 224 },
		{ -47, 1, YYAT_DEFAULT, 128 },
		{ -53, 1, YYAT_DEFAULT, 224 },
		{ 94, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 106 },
		{ 0, 0, YYAT_REDUCE, 133 },
		{ 27, 1, YYAT_REDUCE, 113 },
		{ 0, 0, YYAT_REDUCE, 111 },
		{ -63, 1, YYAT_DEFAULT, 224 },
		{ 0, 0, YYAT_DEFAULT, 219 },
		{ 0, 0, YYAT_DEFAULT, 219 },
		{ -62, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_DEFAULT, 219 },
		{ -63, 1, YYAT_ERROR, 0 },
		{ -65, 1, YYAT_ERROR, 0 },
		{ 14, 1, YYAT_DEFAULT, 198 },
		{ 0, 0, YYAT_REDUCE, 77 },
		{ -25, 1, YYAT_ERROR, 0 },
		{ -249, 1, YYAT_REDUCE, 79 },
		{ 0, 0, YYAT_REDUCE, 107 },
		{ 0, 0, YYAT_REDUCE, 109 },
		{ 0, 0, YYAT_REDUCE, 72 },
		{ -72, 1, YYAT_DEFAULT, 224 },
		{ -74, 1, YYAT_DEFAULT, 224 },
		{ 0, 0, YYAT_DEFAULT, 219 },
		{ -76, 1, YYAT_DEFAULT, 224 },
		{ 0, 0, YYAT_DEFAULT, 219 },
		{ 0, 0, YYAT_DEFAULT, 219 },
		{ -82, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 78 },
		{ -83, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 71 },
		{ 0, 0, YYAT_REDUCE, 70 },
		{ -86, 1, YYAT_DEFAULT, 224 },
		{ 0, 0, YYAT_REDUCE, 68 },
		{ -87, 1, YYAT_DEFAULT, 224 },
		{ -88, 1, YYAT_DEFAULT, 224 },
		{ 0, 0, YYAT_DEFAULT, 219 },
		{ -89, 1, YYAT_DEFAULT, 224 },
		{ 0, 0, YYAT_REDUCE, 69 },
		{ 0, 0, YYAT_REDUCE, 67 },
		{ 0, 0, YYAT_REDUCE, 66 },
		{ -91, 1, YYAT_DEFAULT, 224 },
		{ 97, 1, YYAT_ERROR, 0 },
		{ 0, 0, YYAT_REDUCE, 65 },
		{ 0, 0, YYAT_REDUCE, 80 }
	};
	yystateaction = stateaction;

	yynontermgoto_size = 90;

	static const yynontermgoto_t YYNEARFAR YYBASED_CODE nontermgoto[] = {
		{ 184, 129 },
		{ 184, 58 },
		{ 184, 60 },
		{ 182, 198 },
		{ 184, 59 },
		{ 184, 61 },
		{ 184, 62 },
		{ 26, 63 },
		{ 26, 65 },
		{ 143, 77 },
		{ 143, 23 },
		{ 143, 25 },
		{ 218, 223 },
		{ 64, 57 },
		{ 26, 64 },
		{ 26, 23 },
		{ 26, 25 },
		{ 208, 217 },
		{ 81, 143 },
		{ 143, 138 },
		{ 143, 80 },
		{ 184, 201 },
		{ 64, 121 },
		{ 224, 30 },
		{ 182, -1 },
		{ 81, 79 },
		{ 21, 31 },
		{ 21, 21 },
		{ 32, -1 },
		{ 143, 24 },
		{ 207, 216 },
		{ 32, 70 },
		{ 224, 17 },
		{ 205, 214 },
		{ 26, 24 },
		{ 224, 18 },
		{ 224, 19 },
		{ 224, 20 },
		{ 21, -1 },
		{ 224, 22 },
		{ 169, 188 },
		{ 72, 127 },
		{ 193, 206 },
		{ 169, 140 },
		{ 169, 39 },
		{ 169, 38 },
		{ 219, 224 },
		{ 219, 16 },
		{ 72, 37 },
		{ 128, 162 },
		{ 128, 163 },
		{ 118, -1 },
		{ 118, 154 },
		{ 80, 141 },
		{ 80, 142 },
		{ 77, -1 },
		{ 77, 136 },
		{ 22, 35 },
		{ 22, 36 },
		{ 0, 14 },
		{ 0, 15 },
		{ 191, 204 },
		{ 190, 203 },
		{ 180, 196 },
		{ 172, 189 },
		{ 168, 187 },
		{ 161, 183 },
		{ 159, 181 },
		{ 156, 179 },
		{ 154, 114 },
		{ 147, 175 },
		{ 139, 167 },
		{ 122, 158 },
		{ 120, 157 },
		{ 116, 152 },
		{ 114, 150 },
		{ 85, 148 },
		{ 83, 146 },
		{ 76, 135 },
		{ 75, 133 },
		{ 73, 130 },
		{ 60, 115 },
		{ 48, 84 },
		{ 44, 82 },
		{ 40, 78 },
		{ 38, 74 },
		{ 33, 71 },
		{ 29, 69 },
		{ 28, 68 },
		{ 27, 67 }
	};
	yynontermgoto = nontermgoto;

	static const yystategoto_t YYNEARFAR YYBASED_CODE stategoto[] = {
		{ 58, 219 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, 224 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 7, 77 },
		{ 33, 72 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ -6, 64 },
		{ 84, 182 },
		{ 86, 219 },
		{ 82, 182 },
		{ 0, -1 },
		{ 0, -1 },
		{ -1, 169 },
		{ 52, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 52, -1 },
		{ 0, -1 },
		{ 61, 81 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 78, 182 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 77, 182 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, 154 },
		{ 0, -1 },
		{ 75, 118 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 8, 182 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, 224 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 16, 32 },
		{ 54, 184 },
		{ 0, -1 },
		{ 42, -1 },
		{ 73, 182 },
		{ 25, 143 },
		{ 0, 143 },
		{ 0, -1 },
		{ 25, 169 },
		{ -5, 143 },
		{ 0, -1 },
		{ 72, 182 },
		{ 0, -1 },
		{ 70, 118 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 69, 118 },
		{ 0, 154 },
		{ 69, 182 },
		{ 0, -1 },
		{ 46, 182 },
		{ 0, -1 },
		{ 68, 182 },
		{ 0, -1 },
		{ 67, 182 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 23, 184 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 66, 182 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ -11, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 65, 182 },
		{ 0, 154 },
		{ 0, -1 },
		{ 0, 154 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 61, -1 },
		{ 0, -1 },
		{ 63, 182 },
		{ 0, -1 },
		{ 0, -1 },
		{ 65, 219 },
		{ 0, -1 },
		{ 64, 219 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 60, 182 },
		{ 11, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 62, 219 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 58, 182 },
		{ 0, 224 },
		{ -2, 184 },
		{ 0, 224 },
		{ -5, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, 224 },
		{ 60, 219 },
		{ 59, 219 },
		{ 0, -1 },
		{ 40, 219 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, 224 },
		{ 0, 224 },
		{ 31, 219 },
		{ 0, 224 },
		{ 28, 219 },
		{ 15, 219 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, 224 },
		{ 0, -1 },
		{ 0, 224 },
		{ 0, 224 },
		{ 10, 219 },
		{ 44, 224 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, -1 },
		{ 0, 224 },
		{ 20, 21 },
		{ 0, -1 },
		{ 0, -1 }
	};
	yystategoto = stategoto;

	yydestructorptr = NULL;

	yytokendestptr = NULL;
	yytokendest_size = 0;

	yytokendestbaseptr = NULL;
	yytokendestbase_size = 0;
}
#line 220 ".\\myparser.y"


/////////////////////////////////////////////////////////////////////////////
// programs section

INT main(void)
{
	FILE *fp1, *fp2;
	freopen_s(&fp1, ".//input.txt", "r", stdin);
	freopen_s(&fp2, ".//output.txt", "w", stdout);
	INT n = 1;
	mylexer lexer;
	myparser parser;
	if (parser.yycreate(&lexer)) {
		if (lexer.yycreate(&parser)) {
			n = parser.yyparse();
		}
	}
	return n;
}


